void startWebServer(){
    if(WiFi.waitForConnectResult() == WL_CONNECTED){
    MDNS.begin(HOSTNAME);
    server.on("/reboot", HTTP_GET,[](){
      server.send(200, "text/plain", "Rebooting!!");
      ESP.restart();
    });
    server.on("/update", HTTP_GET, [](){
      server.sendHeader("Connection", "close");
      server.sendHeader("Access-Control-Allow-Origin", "*");
      server.send(200, "text/html", serverIndex);
      updating = true;
      updateStarted_time = millis();
      detachInterrupt(digitalPinToInterrupt(movementPIN));
    });
    server.onFileUpload([](){
      if(server.uri() != "/update") return;
      //detachInterrupt(digitalPinToInterrupt(movementPIN));
      HTTPUpload& upload = server.upload();
      if(upload.status == UPLOAD_FILE_START){
        Serial.setDebugOutput(true);
        WiFiUDP::stopAll();
        Serial.printf("Update: %s\n", upload.filename.c_str());
        uint32_t maxSketchSpace = (ESP.getFreeSketchSpace() - 0x1000) & 0xFFFFF000;
        if(!Update.begin(maxSketchSpace)){//start with max available size
          Update.printError(Serial);
        }
      } else if(upload.status == UPLOAD_FILE_WRITE){
        if(Update.write(upload.buf, upload.currentSize) != upload.currentSize){
          Update.printError(Serial);
        }
      } else if(upload.status == UPLOAD_FILE_END){
        if(Update.end(true)){ //true to set the size to the current progress
          Serial.printf("Update Success: %u\nRebooting...\n", upload.totalSize);
        } else {
          Update.printError(Serial);
        }
        Serial.setDebugOutput(false);
      }
      yield();
    });
    server.on ( "/", handleSensorData );
    server.on ( "/on", HTTP_GET, [](){
      licht_aan();
      server.send(200, "text/plain", "Lights on!!");
    });
    server.on ( "/off", HTTP_GET, [](){
      licht_uit();
      server.send(200, "text/plain", "Lights off!!");
    });
    server.on("/update", HTTP_POST, [](){
      server.sendHeader("Connection", "close");
      server.sendHeader("Access-Control-Allow-Origin", "*");
      server.send(200, "text/plain", (Update.hasError())?"FAIL":"OK");
      ESP.restart();
    });
    server.begin();
    MDNS.addService("http", "tcp", 80);

    Serial.printf("Ready! Open http://%s.local in your browser\n", HOSTNAME);
  } else {
    Serial.printf("WiFi Failed");
  }
}
